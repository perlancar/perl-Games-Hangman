#!perl

# DATE
# VERSION

use Games::Hangman;
use Getopt::Long qw(:config bundling auto_version auto_help);

my %opts = (
    list => undef,
    min_len => undef,
);
GetOptions(
    'list|l=s' => \$opts{list},
);

my $game = Games::Hangman->new(%opts);
$game->run;

# ABSTRACT: A text-based hangman
# PODNAME: hangman

=head1 SYNOPSIS

 % hangman
 % hangman -l Proverb::TWW; # select specific word-/phraselist

 % hangman --help
 % hangman --version

Example of game display:

    ____
   |    |      Phrase #:    2
   |    o      Guessed : abcmtwxyz
   |   /|\     Average :  50%
   |    |
   |   /
  _|_
 |   |______
 |          |
 |__________|

 List  : Proverb::TWW
 Phrase: A--'- w--- t-at ---- w---.
 Guess :


=head1 DESCRIPTION

This is yet another text-based implementation of the popular word game Hangman.
In Hangman, you guess a word letter-by-letter. There is a maximum of seven wrong
guesses. Each wrong guess will incrementally draw a figure of a man being hung.
What's different about this particular variant:

=over

=item * Wordlist is searched from C<Games::Word::Wordlist::*> modules

=item * Phraselist

Aside from words, phrases are also allowed. Non-letters will be revealed first.
Phraselists are searched in C<Games::Word::Phraselist::*> modules.

=back


=head1 OPTIONS

=head2 --list=s, -l

Select word-/phraselist, will be searched in C<Games::Word::Wordlist::> or
C<Games::Word::Phraselist::>.

=head2 --min-len=i

Minimum word/phrase length. The default is 6 for word, 0 for phrase.


=head1 SEE ALSO

hangman from C<bsdgames> package

hangman from L<ppt> (Perl Power Tools)

L<Games::Word::Wordlist>

L<Games::Word::Phraselist>
