#!perl

# AUTHORITY
# DATE
# DIST
# VERSION

use Games::Hangman;
use Getopt::Long qw(:config bundling auto_version auto_help);

my %opts = (
    list => undef,
    min_len => undef,
    max_len => undef,
);
GetOptions(
    'wordlist|list|l|w=s' => \$opts{list},
    'min-len=i' => \$opts{min_len},
    'max-len=i' => \$opts{max_len},
);

binmode(STDOUT, ":encoding(utf8)");
my $game = Games::Hangman->new(%opts);
$game->run;

# ABSTRACT: A text-based hangman
# PODNAME:

=head1 SYNOPSIS

 % hangman
 % hangman -l Proverb::TWW; # select specific word-/phraselist

 % hangman --help
 % hangman --version

Example of game display:

    ____
   |    |      Phrase #:    2
   |    o      Guessed : abcmtwxyz
   |   /|\     Average :  50%
   |    |
   |   /
  _|_
 |   |______
 |          |
 |__________|

 List  : Proverb::TWW
 Phrase: A--'- w--- t-at ---- w---.
 Guess :


=head1 DESCRIPTION

This is yet another text-based implementation of the popular word game Hangman.
In Hangman, you guess a word letter-by-letter. There is a maximum of seven wrong
guesses. Each wrong guess will incrementally draw a figure of a man being hung.
What's different about this particular variant:

=over

=item * Longer phrases are allowed

=item * Wordlists (or phrase list) are searched from C<WordList::*> modules

=back


=head1 OPTIONS

=head2 C<--list=s, -l>

Select word-/phraselist, will be searched in C<Wordlist::*> or
C<WordList::Phrase::>.

=head2 C<--wordlist=s, -w>

Alias for C<--wordlist>.

=head2 C<--min-len=i>

Minimum word/phrase length. The default is 5 for word, 0 for phrase.

=head2 C<--max-len=i>

Maximum word/phrase length. The default is unlimited.


=head1 SEE ALSO

hangman from C<bsdgames> Debian package

hangman from C<ppt> (Perl Power Tools) on CPAN

C<WordList::*>
